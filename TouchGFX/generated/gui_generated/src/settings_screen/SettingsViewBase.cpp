/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/settings_screen/SettingsViewBase.hpp>
#include <touchgfx/Color.hpp>

SettingsViewBase::SettingsViewBase() :
    updateItemCallback(this, &SettingsViewBase::updateItemCallbackHandler)
{

    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 90, 320, 60);
    box1.setColor(touchgfx::Color::getColorFromRGB(43, 80, 194));

    scrollWheel1.setPosition(0, 0, 320, 240);
    scrollWheel1.setHorizontal(false);
    scrollWheel1.setCircular(false);
    scrollWheel1.setEasingEquation(touchgfx::EasingEquations::linearEaseOut);
    scrollWheel1.setSwipeAcceleration(0);
    scrollWheel1.setDragAcceleration(0);
    scrollWheel1.setNumberOfItems(7);
    scrollWheel1.setSelectedItemOffset(80);
    scrollWheel1.setDrawableSize(60, 0);
    scrollWheel1.setDrawables(scrollWheel1ListItems, updateItemCallback);
    scrollWheel1.animateToItem(1, 0);

    add(__background);
    add(box1);
    add(scrollWheel1);
}

void SettingsViewBase::setupScreen()
{
    scrollWheel1.initialize();
    for (int i = 0; i < scrollWheel1ListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel1ListItems[i].initialize();
    }
}

//Handles when a key is pressed
void SettingsViewBase::handleKeyEvent(uint8_t key)
{
    if(0 == key)
    {
        //Interaction1
        //When hardware button 0 clicked change screen to Advanced
        //Go to Advanced with screen transition towards East
        application().gotoAdvancedScreenSlideTransitionEast();
    }
}

void SettingsViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheel1ListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        MenuElement* cc = (MenuElement*)d;
        scrollWheel1UpdateItem(*cc, itemIndex);
    }
}
